package com.wsntools.iris.mote.receiving;
/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'dummySerialSender'
 * message type.
 */

public class dummySerialSender extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 23;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 10;

    /** Create a new dummySerialSender of size 23. */
    public dummySerialSender() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new dummySerialSender of the given data_length. */
    public dummySerialSender(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dummySerialSender with the given data_length
     * and base offset.
     */
    public dummySerialSender(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dummySerialSender using the given byte array
     * as backing store.
     */
    public dummySerialSender(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dummySerialSender using the given byte array
     * as backing store, with the given base offset.
     */
    public dummySerialSender(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dummySerialSender using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public dummySerialSender(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dummySerialSender embedded in the given message
     * at the given base offset.
     */
    public dummySerialSender(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dummySerialSender embedded in the given message
     * at the given base offset and length.
     */
    public dummySerialSender(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <dummySerialSender> \n";
      try {
        s += "  [header.id=0x"+Long.toHexString(get_header_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [accel.x=0x"+Long.toHexString(get_accel_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [accel.y=0x"+Long.toHexString(get_accel_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [accel.z=0x"+Long.toHexString(get_accel_z())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [gps.year=0x"+Long.toHexString(get_gps_year())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [gps.month=0x"+Long.toHexString(get_gps_month())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [gps.day=0x"+Long.toHexString(get_gps_day())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [gps.hour=0x"+Long.toHexString(get_gps_hour())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [gps.minute=0x"+Long.toHexString(get_gps_minute())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [gps.msec=0x"+Long.toHexString(get_gps_msec())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [gps.lat=0x"+Long.toHexString(get_gps_lat())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [gps.lon=0x"+Long.toHexString(get_gps_lon())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.id
    //   Field type: short
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.id' is signed (false).
     */
    public static boolean isSigned_header_id() {
        return false;
    }

    /**
     * Return whether the field 'header.id' is an array (false).
     */
    public static boolean isArray_header_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.id'
     */
    public static int offset_header_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.id'
     */
    public static int offsetBits_header_id() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'header.id'
     */
    public short get_header_id() {
        return (short)getUIntBEElement(offsetBits_header_id(), 8);
    }

    /**
     * Set the value of the field 'header.id'
     */
    public void set_header_id(short value) {
        setUIntBEElement(offsetBits_header_id(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.id'
     */
    public static int size_header_id() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.id'
     */
    public static int sizeBits_header_id() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: accel.x
    //   Field type: short
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'accel.x' is signed (false).
     */
    public static boolean isSigned_accel_x() {
        return false;
    }

    /**
     * Return whether the field 'accel.x' is an array (false).
     */
    public static boolean isArray_accel_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'accel.x'
     */
    public static int offset_accel_x() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'accel.x'
     */
    public static int offsetBits_accel_x() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'accel.x'
     */
    public short get_accel_x() {
        return (short)getSIntBEElement(offsetBits_accel_x(), 16);
    }

    /**
     * Set the value of the field 'accel.x'
     */
    public void set_accel_x(short value) {
        setSIntBEElement(offsetBits_accel_x(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'accel.x'
     */
    public static int size_accel_x() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'accel.x'
     */
    public static int sizeBits_accel_x() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: accel.y
    //   Field type: short
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'accel.y' is signed (false).
     */
    public static boolean isSigned_accel_y() {
        return false;
    }

    /**
     * Return whether the field 'accel.y' is an array (false).
     */
    public static boolean isArray_accel_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'accel.y'
     */
    public static int offset_accel_y() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'accel.y'
     */
    public static int offsetBits_accel_y() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'accel.y'
     */
    public short get_accel_y() {
        return (short)getSIntBEElement(offsetBits_accel_y(), 16);
    }

    /**
     * Set the value of the field 'accel.y'
     */
    public void set_accel_y(short value) {
        setSIntBEElement(offsetBits_accel_y(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'accel.y'
     */
    public static int size_accel_y() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'accel.y'
     */
    public static int sizeBits_accel_y() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: accel.z
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'accel.z' is signed (false).
     */
    public static boolean isSigned_accel_z() {
        return false;
    }

    /**
     * Return whether the field 'accel.z' is an array (false).
     */
    public static boolean isArray_accel_z() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'accel.z'
     */
    public static int offset_accel_z() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'accel.z'
     */
    public static int offsetBits_accel_z() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'accel.z'
     */
    public short get_accel_z() {
        return (short)getSIntBEElement(offsetBits_accel_z(), 16);
    }

    /**
     * Set the value of the field 'accel.z'
     */
    public void set_accel_z(short value) {
        setSIntBEElement(offsetBits_accel_z(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'accel.z'
     */
    public static int size_accel_z() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'accel.z'
     */
    public static int sizeBits_accel_z() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: gps.year
    //   Field type: int
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'gps.year' is signed (false).
     */
    public static boolean isSigned_gps_year() {
        return false;
    }

    /**
     * Return whether the field 'gps.year' is an array (false).
     */
    public static boolean isArray_gps_year() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'gps.year'
     */
    public static int offset_gps_year() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'gps.year'
     */
    public static int offsetBits_gps_year() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'gps.year'
     */
    public int get_gps_year() {
        return (int)getUIntBEElement(offsetBits_gps_year(), 16);
    }

    /**
     * Set the value of the field 'gps.year'
     */
    public void set_gps_year(int value) {
        setUIntBEElement(offsetBits_gps_year(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'gps.year'
     */
    public static int size_gps_year() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'gps.year'
     */
    public static int sizeBits_gps_year() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: gps.month
    //   Field type: short
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'gps.month' is signed (false).
     */
    public static boolean isSigned_gps_month() {
        return false;
    }

    /**
     * Return whether the field 'gps.month' is an array (false).
     */
    public static boolean isArray_gps_month() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'gps.month'
     */
    public static int offset_gps_month() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'gps.month'
     */
    public static int offsetBits_gps_month() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'gps.month'
     */
    public short get_gps_month() {
        return (short)getUIntBEElement(offsetBits_gps_month(), 8);
    }

    /**
     * Set the value of the field 'gps.month'
     */
    public void set_gps_month(short value) {
        setUIntBEElement(offsetBits_gps_month(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'gps.month'
     */
    public static int size_gps_month() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'gps.month'
     */
    public static int sizeBits_gps_month() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: gps.day
    //   Field type: short
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'gps.day' is signed (false).
     */
    public static boolean isSigned_gps_day() {
        return false;
    }

    /**
     * Return whether the field 'gps.day' is an array (false).
     */
    public static boolean isArray_gps_day() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'gps.day'
     */
    public static int offset_gps_day() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'gps.day'
     */
    public static int offsetBits_gps_day() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'gps.day'
     */
    public short get_gps_day() {
        return (short)getUIntBEElement(offsetBits_gps_day(), 8);
    }

    /**
     * Set the value of the field 'gps.day'
     */
    public void set_gps_day(short value) {
        setUIntBEElement(offsetBits_gps_day(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'gps.day'
     */
    public static int size_gps_day() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'gps.day'
     */
    public static int sizeBits_gps_day() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: gps.hour
    //   Field type: short
    //   Offset (bits): 88
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'gps.hour' is signed (false).
     */
    public static boolean isSigned_gps_hour() {
        return false;
    }

    /**
     * Return whether the field 'gps.hour' is an array (false).
     */
    public static boolean isArray_gps_hour() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'gps.hour'
     */
    public static int offset_gps_hour() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'gps.hour'
     */
    public static int offsetBits_gps_hour() {
        return 88;
    }

    /**
     * Return the value (as a short) of the field 'gps.hour'
     */
    public short get_gps_hour() {
        return (short)getUIntBEElement(offsetBits_gps_hour(), 8);
    }

    /**
     * Set the value of the field 'gps.hour'
     */
    public void set_gps_hour(short value) {
        setUIntBEElement(offsetBits_gps_hour(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'gps.hour'
     */
    public static int size_gps_hour() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'gps.hour'
     */
    public static int sizeBits_gps_hour() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: gps.minute
    //   Field type: short
    //   Offset (bits): 96
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'gps.minute' is signed (false).
     */
    public static boolean isSigned_gps_minute() {
        return false;
    }

    /**
     * Return whether the field 'gps.minute' is an array (false).
     */
    public static boolean isArray_gps_minute() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'gps.minute'
     */
    public static int offset_gps_minute() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'gps.minute'
     */
    public static int offsetBits_gps_minute() {
        return 96;
    }

    /**
     * Return the value (as a short) of the field 'gps.minute'
     */
    public short get_gps_minute() {
        return (short)getUIntBEElement(offsetBits_gps_minute(), 8);
    }

    /**
     * Set the value of the field 'gps.minute'
     */
    public void set_gps_minute(short value) {
        setUIntBEElement(offsetBits_gps_minute(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'gps.minute'
     */
    public static int size_gps_minute() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'gps.minute'
     */
    public static int sizeBits_gps_minute() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: gps.msec
    //   Field type: int
    //   Offset (bits): 104
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'gps.msec' is signed (false).
     */
    public static boolean isSigned_gps_msec() {
        return false;
    }

    /**
     * Return whether the field 'gps.msec' is an array (false).
     */
    public static boolean isArray_gps_msec() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'gps.msec'
     */
    public static int offset_gps_msec() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'gps.msec'
     */
    public static int offsetBits_gps_msec() {
        return 104;
    }

    /**
     * Return the value (as a int) of the field 'gps.msec'
     */
    public int get_gps_msec() {
        return (int)getUIntBEElement(offsetBits_gps_msec(), 16);
    }

    /**
     * Set the value of the field 'gps.msec'
     */
    public void set_gps_msec(int value) {
        setUIntBEElement(offsetBits_gps_msec(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'gps.msec'
     */
    public static int size_gps_msec() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'gps.msec'
     */
    public static int sizeBits_gps_msec() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: gps.lat
    //   Field type: int
    //   Offset (bits): 120
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'gps.lat' is signed (false).
     */
    public static boolean isSigned_gps_lat() {
        return false;
    }

    /**
     * Return whether the field 'gps.lat' is an array (false).
     */
    public static boolean isArray_gps_lat() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'gps.lat'
     */
    public static int offset_gps_lat() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'gps.lat'
     */
    public static int offsetBits_gps_lat() {
        return 120;
    }

    /**
     * Return the value (as a int) of the field 'gps.lat'
     */
    public int get_gps_lat() {
        return (int)getSIntBEElement(offsetBits_gps_lat(), 32);
    }

    /**
     * Set the value of the field 'gps.lat'
     */
    public void set_gps_lat(int value) {
        setSIntBEElement(offsetBits_gps_lat(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'gps.lat'
     */
    public static int size_gps_lat() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'gps.lat'
     */
    public static int sizeBits_gps_lat() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: gps.lon
    //   Field type: int
    //   Offset (bits): 152
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'gps.lon' is signed (false).
     */
    public static boolean isSigned_gps_lon() {
        return false;
    }

    /**
     * Return whether the field 'gps.lon' is an array (false).
     */
    public static boolean isArray_gps_lon() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'gps.lon'
     */
    public static int offset_gps_lon() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'gps.lon'
     */
    public static int offsetBits_gps_lon() {
        return 152;
    }

    /**
     * Return the value (as a int) of the field 'gps.lon'
     */
    public int get_gps_lon() {
        return (int)getSIntBEElement(offsetBits_gps_lon(), 32);
    }

    /**
     * Set the value of the field 'gps.lon'
     */
    public void set_gps_lon(int value) {
        setSIntBEElement(offsetBits_gps_lon(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'gps.lon'
     */
    public static int size_gps_lon() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'gps.lon'
     */
    public static int sizeBits_gps_lon() {
        return 32;
    }

}
