package mote.sending;
/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'sus_message_t'
 * message type.
 */

public class sus_message_t extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 26;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 20;

    /** Create a new sus_message_t of size 26. */
    public sus_message_t() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new sus_message_t of the given data_length. */
    public sus_message_t(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new sus_message_t with the given data_length
     * and base offset.
     */
    public sus_message_t(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new sus_message_t using the given byte array
     * as backing store.
     */
    public sus_message_t(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new sus_message_t using the given byte array
     * as backing store, with the given base offset.
     */
    public sus_message_t(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new sus_message_t using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public sus_message_t(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new sus_message_t embedded in the given message
     * at the given base offset.
     */
    public sus_message_t(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new sus_message_t embedded in the given message
     * at the given base offset and length.
     */
    public sus_message_t(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <sus_message_t> \n";
      try {
        s += "  [header.experimentID=0x"+Long.toHexString(get_header_experimentID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.sourceID=0x"+Long.toHexString(get_header_sourceID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.destinationID=0x"+Long.toHexString(get_header_destinationID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [header.msgType=0x"+Long.toHexString(get_header_msgType())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.preTestMsg.uavInPosTime=0x"+Long.toHexString(get_body_preTestMsg_uavInPosTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.preTestMsg.pushNumber=0x"+Long.toHexString(get_body_preTestMsg_pushNumber())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.preTestMsg.txPowerUAV=0x"+Long.toHexString(get_body_preTestMsg_txPowerUAV())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.initMsg.uavInPosTime=0x"+Long.toHexString(get_body_initMsg_uavInPosTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.initMsg.pushNumber=0x"+Long.toHexString(get_body_initMsg_pushNumber())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.initMsg.pollNumber=0x"+Long.toHexString(get_body_initMsg_pollNumber())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.initMsg.pollID=0x"+Long.toHexString(get_body_initMsg_pollID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.initMsg.respNumber=0x"+Long.toHexString(get_body_initMsg_respNumber())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.initMsg.txPowerUAV=0x"+Long.toHexString(get_body_initMsg_txPowerUAV())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.initMsg.txPowerGMote=0x"+Long.toHexString(get_body_initMsg_txPowerGMote())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.pollMsg.pollID=0x"+Long.toHexString(get_body_pollMsg_pollID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.pollMsg.totalPollNumber=0x"+Long.toHexString(get_body_pollMsg_totalPollNumber())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.pollMsg.respNumber=0x"+Long.toHexString(get_body_pollMsg_respNumber())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.pollMsg.txPowerGMote=0x"+Long.toHexString(get_body_pollMsg_txPowerGMote())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.pushMsg.seqNumberPush=0x"+Long.toHexString(get_body_pushMsg_seqNumberPush())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.respMsg.seqNumberResp=0x"+Long.toHexString(get_body_respMsg_seqNumberResp())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.respMsg.pushMsgLQ.RSSI=0x"+Long.toHexString(get_body_respMsg_pushMsgLQ_RSSI())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.respMsg.pushMsgLQ.LQI=0x"+Long.toHexString(get_body_respMsg_pushMsgLQ_LQI())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.respMsg.pushMsgLQ.CRC=0x"+Long.toHexString(get_body_respMsg_pushMsgLQ_CRC())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.respMsg.pushMsgLQ.noiseFlr=0x"+Long.toHexString(get_body_respMsg_pushMsgLQ_noiseFlr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.respMsg.respMsgLQ.RSSI=0x"+Long.toHexString(get_body_respMsg_respMsgLQ_RSSI())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.respMsg.respMsgLQ.LQI=0x"+Long.toHexString(get_body_respMsg_respMsgLQ_LQI())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.respMsg.respMsgLQ.CRC=0x"+Long.toHexString(get_body_respMsg_respMsgLQ_CRC())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.respMsg.respMsgLQ.noiseFlr=0x"+Long.toHexString(get_body_respMsg_respMsgLQ_noiseFlr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.respMsg.temperature=0x"+Long.toHexString(get_body_respMsg_temperature())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [body.respMsg.humidity=0x"+Long.toHexString(get_body_respMsg_humidity())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.experimentID
    //   Field type: short
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.experimentID' is signed (false).
     */
    public static boolean isSigned_header_experimentID() {
        return false;
    }

    /**
     * Return whether the field 'header.experimentID' is an array (false).
     */
    public static boolean isArray_header_experimentID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.experimentID'
     */
    public static int offset_header_experimentID() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.experimentID'
     */
    public static int offsetBits_header_experimentID() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'header.experimentID'
     */
    public short get_header_experimentID() {
        return (short)getUIntBEElement(offsetBits_header_experimentID(), 8);
    }

    /**
     * Set the value of the field 'header.experimentID'
     */
    public void set_header_experimentID(short value) {
        setUIntBEElement(offsetBits_header_experimentID(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.experimentID'
     */
    public static int size_header_experimentID() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.experimentID'
     */
    public static int sizeBits_header_experimentID() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.sourceID
    //   Field type: short
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.sourceID' is signed (false).
     */
    public static boolean isSigned_header_sourceID() {
        return false;
    }

    /**
     * Return whether the field 'header.sourceID' is an array (false).
     */
    public static boolean isArray_header_sourceID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.sourceID'
     */
    public static int offset_header_sourceID() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.sourceID'
     */
    public static int offsetBits_header_sourceID() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'header.sourceID'
     */
    public short get_header_sourceID() {
        return (short)getUIntBEElement(offsetBits_header_sourceID(), 8);
    }

    /**
     * Set the value of the field 'header.sourceID'
     */
    public void set_header_sourceID(short value) {
        setUIntBEElement(offsetBits_header_sourceID(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.sourceID'
     */
    public static int size_header_sourceID() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.sourceID'
     */
    public static int sizeBits_header_sourceID() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.destinationID
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.destinationID' is signed (false).
     */
    public static boolean isSigned_header_destinationID() {
        return false;
    }

    /**
     * Return whether the field 'header.destinationID' is an array (false).
     */
    public static boolean isArray_header_destinationID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.destinationID'
     */
    public static int offset_header_destinationID() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.destinationID'
     */
    public static int offsetBits_header_destinationID() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'header.destinationID'
     */
    public int get_header_destinationID() {
        return (int)getUIntBEElement(offsetBits_header_destinationID(), 16);
    }

    /**
     * Set the value of the field 'header.destinationID'
     */
    public void set_header_destinationID(int value) {
        setUIntBEElement(offsetBits_header_destinationID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.destinationID'
     */
    public static int size_header_destinationID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.destinationID'
     */
    public static int sizeBits_header_destinationID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header.msgType
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header.msgType' is signed (false).
     */
    public static boolean isSigned_header_msgType() {
        return false;
    }

    /**
     * Return whether the field 'header.msgType' is an array (false).
     */
    public static boolean isArray_header_msgType() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header.msgType'
     */
    public static int offset_header_msgType() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header.msgType'
     */
    public static int offsetBits_header_msgType() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'header.msgType'
     */
    public short get_header_msgType() {
        return (short)getUIntBEElement(offsetBits_header_msgType(), 8);
    }

    /**
     * Set the value of the field 'header.msgType'
     */
    public void set_header_msgType(short value) {
        setUIntBEElement(offsetBits_header_msgType(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header.msgType'
     */
    public static int size_header_msgType() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header.msgType'
     */
    public static int sizeBits_header_msgType() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.preTestMsg.uavInPosTime
    //   Field type: long
    //   Offset (bits): 40
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.preTestMsg.uavInPosTime' is signed (false).
     */
    public static boolean isSigned_body_preTestMsg_uavInPosTime() {
        return false;
    }

    /**
     * Return whether the field 'body.preTestMsg.uavInPosTime' is an array (false).
     */
    public static boolean isArray_body_preTestMsg_uavInPosTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.preTestMsg.uavInPosTime'
     */
    public static int offset_body_preTestMsg_uavInPosTime() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.preTestMsg.uavInPosTime'
     */
    public static int offsetBits_body_preTestMsg_uavInPosTime() {
        return 40;
    }

    /**
     * Return the value (as a long) of the field 'body.preTestMsg.uavInPosTime'
     */
    public long get_body_preTestMsg_uavInPosTime() {
        return (long)getUIntBEElement(offsetBits_body_preTestMsg_uavInPosTime(), 32);
    }

    /**
     * Set the value of the field 'body.preTestMsg.uavInPosTime'
     */
    public void set_body_preTestMsg_uavInPosTime(long value) {
        setUIntBEElement(offsetBits_body_preTestMsg_uavInPosTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.preTestMsg.uavInPosTime'
     */
    public static int size_body_preTestMsg_uavInPosTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.preTestMsg.uavInPosTime'
     */
    public static int sizeBits_body_preTestMsg_uavInPosTime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.preTestMsg.pushNumber
    //   Field type: short
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.preTestMsg.pushNumber' is signed (false).
     */
    public static boolean isSigned_body_preTestMsg_pushNumber() {
        return false;
    }

    /**
     * Return whether the field 'body.preTestMsg.pushNumber' is an array (false).
     */
    public static boolean isArray_body_preTestMsg_pushNumber() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.preTestMsg.pushNumber'
     */
    public static int offset_body_preTestMsg_pushNumber() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.preTestMsg.pushNumber'
     */
    public static int offsetBits_body_preTestMsg_pushNumber() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'body.preTestMsg.pushNumber'
     */
    public short get_body_preTestMsg_pushNumber() {
        return (short)getUIntBEElement(offsetBits_body_preTestMsg_pushNumber(), 8);
    }

    /**
     * Set the value of the field 'body.preTestMsg.pushNumber'
     */
    public void set_body_preTestMsg_pushNumber(short value) {
        setUIntBEElement(offsetBits_body_preTestMsg_pushNumber(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.preTestMsg.pushNumber'
     */
    public static int size_body_preTestMsg_pushNumber() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.preTestMsg.pushNumber'
     */
    public static int sizeBits_body_preTestMsg_pushNumber() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.preTestMsg.txPowerUAV
    //   Field type: short
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.preTestMsg.txPowerUAV' is signed (false).
     */
    public static boolean isSigned_body_preTestMsg_txPowerUAV() {
        return false;
    }

    /**
     * Return whether the field 'body.preTestMsg.txPowerUAV' is an array (false).
     */
    public static boolean isArray_body_preTestMsg_txPowerUAV() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.preTestMsg.txPowerUAV'
     */
    public static int offset_body_preTestMsg_txPowerUAV() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.preTestMsg.txPowerUAV'
     */
    public static int offsetBits_body_preTestMsg_txPowerUAV() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'body.preTestMsg.txPowerUAV'
     */
    public short get_body_preTestMsg_txPowerUAV() {
        return (short)getUIntBEElement(offsetBits_body_preTestMsg_txPowerUAV(), 8);
    }

    /**
     * Set the value of the field 'body.preTestMsg.txPowerUAV'
     */
    public void set_body_preTestMsg_txPowerUAV(short value) {
        setUIntBEElement(offsetBits_body_preTestMsg_txPowerUAV(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.preTestMsg.txPowerUAV'
     */
    public static int size_body_preTestMsg_txPowerUAV() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.preTestMsg.txPowerUAV'
     */
    public static int sizeBits_body_preTestMsg_txPowerUAV() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.initMsg.uavInPosTime
    //   Field type: long
    //   Offset (bits): 40
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.initMsg.uavInPosTime' is signed (false).
     */
    public static boolean isSigned_body_initMsg_uavInPosTime() {
        return false;
    }

    /**
     * Return whether the field 'body.initMsg.uavInPosTime' is an array (false).
     */
    public static boolean isArray_body_initMsg_uavInPosTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.initMsg.uavInPosTime'
     */
    public static int offset_body_initMsg_uavInPosTime() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.initMsg.uavInPosTime'
     */
    public static int offsetBits_body_initMsg_uavInPosTime() {
        return 40;
    }

    /**
     * Return the value (as a long) of the field 'body.initMsg.uavInPosTime'
     */
    public long get_body_initMsg_uavInPosTime() {
        return (long)getUIntBEElement(offsetBits_body_initMsg_uavInPosTime(), 32);
    }

    /**
     * Set the value of the field 'body.initMsg.uavInPosTime'
     */
    public void set_body_initMsg_uavInPosTime(long value) {
        setUIntBEElement(offsetBits_body_initMsg_uavInPosTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.initMsg.uavInPosTime'
     */
    public static int size_body_initMsg_uavInPosTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.initMsg.uavInPosTime'
     */
    public static int sizeBits_body_initMsg_uavInPosTime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.initMsg.pushNumber
    //   Field type: short
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.initMsg.pushNumber' is signed (false).
     */
    public static boolean isSigned_body_initMsg_pushNumber() {
        return false;
    }

    /**
     * Return whether the field 'body.initMsg.pushNumber' is an array (false).
     */
    public static boolean isArray_body_initMsg_pushNumber() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.initMsg.pushNumber'
     */
    public static int offset_body_initMsg_pushNumber() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.initMsg.pushNumber'
     */
    public static int offsetBits_body_initMsg_pushNumber() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'body.initMsg.pushNumber'
     */
    public short get_body_initMsg_pushNumber() {
        return (short)getUIntBEElement(offsetBits_body_initMsg_pushNumber(), 8);
    }

    /**
     * Set the value of the field 'body.initMsg.pushNumber'
     */
    public void set_body_initMsg_pushNumber(short value) {
        setUIntBEElement(offsetBits_body_initMsg_pushNumber(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.initMsg.pushNumber'
     */
    public static int size_body_initMsg_pushNumber() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.initMsg.pushNumber'
     */
    public static int sizeBits_body_initMsg_pushNumber() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.initMsg.pollNumber
    //   Field type: short
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.initMsg.pollNumber' is signed (false).
     */
    public static boolean isSigned_body_initMsg_pollNumber() {
        return false;
    }

    /**
     * Return whether the field 'body.initMsg.pollNumber' is an array (false).
     */
    public static boolean isArray_body_initMsg_pollNumber() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.initMsg.pollNumber'
     */
    public static int offset_body_initMsg_pollNumber() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.initMsg.pollNumber'
     */
    public static int offsetBits_body_initMsg_pollNumber() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'body.initMsg.pollNumber'
     */
    public short get_body_initMsg_pollNumber() {
        return (short)getUIntBEElement(offsetBits_body_initMsg_pollNumber(), 8);
    }

    /**
     * Set the value of the field 'body.initMsg.pollNumber'
     */
    public void set_body_initMsg_pollNumber(short value) {
        setUIntBEElement(offsetBits_body_initMsg_pollNumber(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.initMsg.pollNumber'
     */
    public static int size_body_initMsg_pollNumber() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.initMsg.pollNumber'
     */
    public static int sizeBits_body_initMsg_pollNumber() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.initMsg.pollID
    //   Field type: int
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.initMsg.pollID' is signed (false).
     */
    public static boolean isSigned_body_initMsg_pollID() {
        return false;
    }

    /**
     * Return whether the field 'body.initMsg.pollID' is an array (false).
     */
    public static boolean isArray_body_initMsg_pollID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.initMsg.pollID'
     */
    public static int offset_body_initMsg_pollID() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.initMsg.pollID'
     */
    public static int offsetBits_body_initMsg_pollID() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'body.initMsg.pollID'
     */
    public int get_body_initMsg_pollID() {
        return (int)getUIntBEElement(offsetBits_body_initMsg_pollID(), 16);
    }

    /**
     * Set the value of the field 'body.initMsg.pollID'
     */
    public void set_body_initMsg_pollID(int value) {
        setUIntBEElement(offsetBits_body_initMsg_pollID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.initMsg.pollID'
     */
    public static int size_body_initMsg_pollID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.initMsg.pollID'
     */
    public static int sizeBits_body_initMsg_pollID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.initMsg.respNumber
    //   Field type: short
    //   Offset (bits): 104
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.initMsg.respNumber' is signed (false).
     */
    public static boolean isSigned_body_initMsg_respNumber() {
        return false;
    }

    /**
     * Return whether the field 'body.initMsg.respNumber' is an array (false).
     */
    public static boolean isArray_body_initMsg_respNumber() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.initMsg.respNumber'
     */
    public static int offset_body_initMsg_respNumber() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.initMsg.respNumber'
     */
    public static int offsetBits_body_initMsg_respNumber() {
        return 104;
    }

    /**
     * Return the value (as a short) of the field 'body.initMsg.respNumber'
     */
    public short get_body_initMsg_respNumber() {
        return (short)getUIntBEElement(offsetBits_body_initMsg_respNumber(), 8);
    }

    /**
     * Set the value of the field 'body.initMsg.respNumber'
     */
    public void set_body_initMsg_respNumber(short value) {
        setUIntBEElement(offsetBits_body_initMsg_respNumber(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.initMsg.respNumber'
     */
    public static int size_body_initMsg_respNumber() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.initMsg.respNumber'
     */
    public static int sizeBits_body_initMsg_respNumber() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.initMsg.txPowerUAV
    //   Field type: short
    //   Offset (bits): 112
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.initMsg.txPowerUAV' is signed (false).
     */
    public static boolean isSigned_body_initMsg_txPowerUAV() {
        return false;
    }

    /**
     * Return whether the field 'body.initMsg.txPowerUAV' is an array (false).
     */
    public static boolean isArray_body_initMsg_txPowerUAV() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.initMsg.txPowerUAV'
     */
    public static int offset_body_initMsg_txPowerUAV() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.initMsg.txPowerUAV'
     */
    public static int offsetBits_body_initMsg_txPowerUAV() {
        return 112;
    }

    /**
     * Return the value (as a short) of the field 'body.initMsg.txPowerUAV'
     */
    public short get_body_initMsg_txPowerUAV() {
        return (short)getUIntBEElement(offsetBits_body_initMsg_txPowerUAV(), 8);
    }

    /**
     * Set the value of the field 'body.initMsg.txPowerUAV'
     */
    public void set_body_initMsg_txPowerUAV(short value) {
        setUIntBEElement(offsetBits_body_initMsg_txPowerUAV(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.initMsg.txPowerUAV'
     */
    public static int size_body_initMsg_txPowerUAV() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.initMsg.txPowerUAV'
     */
    public static int sizeBits_body_initMsg_txPowerUAV() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.initMsg.txPowerGMote
    //   Field type: short
    //   Offset (bits): 120
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.initMsg.txPowerGMote' is signed (false).
     */
    public static boolean isSigned_body_initMsg_txPowerGMote() {
        return false;
    }

    /**
     * Return whether the field 'body.initMsg.txPowerGMote' is an array (false).
     */
    public static boolean isArray_body_initMsg_txPowerGMote() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.initMsg.txPowerGMote'
     */
    public static int offset_body_initMsg_txPowerGMote() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.initMsg.txPowerGMote'
     */
    public static int offsetBits_body_initMsg_txPowerGMote() {
        return 120;
    }

    /**
     * Return the value (as a short) of the field 'body.initMsg.txPowerGMote'
     */
    public short get_body_initMsg_txPowerGMote() {
        return (short)getUIntBEElement(offsetBits_body_initMsg_txPowerGMote(), 8);
    }

    /**
     * Set the value of the field 'body.initMsg.txPowerGMote'
     */
    public void set_body_initMsg_txPowerGMote(short value) {
        setUIntBEElement(offsetBits_body_initMsg_txPowerGMote(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.initMsg.txPowerGMote'
     */
    public static int size_body_initMsg_txPowerGMote() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.initMsg.txPowerGMote'
     */
    public static int sizeBits_body_initMsg_txPowerGMote() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.pollMsg.pollID
    //   Field type: int
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.pollMsg.pollID' is signed (false).
     */
    public static boolean isSigned_body_pollMsg_pollID() {
        return false;
    }

    /**
     * Return whether the field 'body.pollMsg.pollID' is an array (false).
     */
    public static boolean isArray_body_pollMsg_pollID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.pollMsg.pollID'
     */
    public static int offset_body_pollMsg_pollID() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.pollMsg.pollID'
     */
    public static int offsetBits_body_pollMsg_pollID() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'body.pollMsg.pollID'
     */
    public int get_body_pollMsg_pollID() {
        return (int)getUIntBEElement(offsetBits_body_pollMsg_pollID(), 16);
    }

    /**
     * Set the value of the field 'body.pollMsg.pollID'
     */
    public void set_body_pollMsg_pollID(int value) {
        setUIntBEElement(offsetBits_body_pollMsg_pollID(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.pollMsg.pollID'
     */
    public static int size_body_pollMsg_pollID() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.pollMsg.pollID'
     */
    public static int sizeBits_body_pollMsg_pollID() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.pollMsg.totalPollNumber
    //   Field type: short
    //   Offset (bits): 56
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.pollMsg.totalPollNumber' is signed (false).
     */
    public static boolean isSigned_body_pollMsg_totalPollNumber() {
        return false;
    }

    /**
     * Return whether the field 'body.pollMsg.totalPollNumber' is an array (false).
     */
    public static boolean isArray_body_pollMsg_totalPollNumber() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.pollMsg.totalPollNumber'
     */
    public static int offset_body_pollMsg_totalPollNumber() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.pollMsg.totalPollNumber'
     */
    public static int offsetBits_body_pollMsg_totalPollNumber() {
        return 56;
    }

    /**
     * Return the value (as a short) of the field 'body.pollMsg.totalPollNumber'
     */
    public short get_body_pollMsg_totalPollNumber() {
        return (short)getUIntBEElement(offsetBits_body_pollMsg_totalPollNumber(), 8);
    }

    /**
     * Set the value of the field 'body.pollMsg.totalPollNumber'
     */
    public void set_body_pollMsg_totalPollNumber(short value) {
        setUIntBEElement(offsetBits_body_pollMsg_totalPollNumber(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.pollMsg.totalPollNumber'
     */
    public static int size_body_pollMsg_totalPollNumber() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.pollMsg.totalPollNumber'
     */
    public static int sizeBits_body_pollMsg_totalPollNumber() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.pollMsg.respNumber
    //   Field type: short
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.pollMsg.respNumber' is signed (false).
     */
    public static boolean isSigned_body_pollMsg_respNumber() {
        return false;
    }

    /**
     * Return whether the field 'body.pollMsg.respNumber' is an array (false).
     */
    public static boolean isArray_body_pollMsg_respNumber() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.pollMsg.respNumber'
     */
    public static int offset_body_pollMsg_respNumber() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.pollMsg.respNumber'
     */
    public static int offsetBits_body_pollMsg_respNumber() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'body.pollMsg.respNumber'
     */
    public short get_body_pollMsg_respNumber() {
        return (short)getUIntBEElement(offsetBits_body_pollMsg_respNumber(), 8);
    }

    /**
     * Set the value of the field 'body.pollMsg.respNumber'
     */
    public void set_body_pollMsg_respNumber(short value) {
        setUIntBEElement(offsetBits_body_pollMsg_respNumber(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.pollMsg.respNumber'
     */
    public static int size_body_pollMsg_respNumber() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.pollMsg.respNumber'
     */
    public static int sizeBits_body_pollMsg_respNumber() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.pollMsg.txPowerGMote
    //   Field type: short
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.pollMsg.txPowerGMote' is signed (false).
     */
    public static boolean isSigned_body_pollMsg_txPowerGMote() {
        return false;
    }

    /**
     * Return whether the field 'body.pollMsg.txPowerGMote' is an array (false).
     */
    public static boolean isArray_body_pollMsg_txPowerGMote() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.pollMsg.txPowerGMote'
     */
    public static int offset_body_pollMsg_txPowerGMote() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.pollMsg.txPowerGMote'
     */
    public static int offsetBits_body_pollMsg_txPowerGMote() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'body.pollMsg.txPowerGMote'
     */
    public short get_body_pollMsg_txPowerGMote() {
        return (short)getUIntBEElement(offsetBits_body_pollMsg_txPowerGMote(), 8);
    }

    /**
     * Set the value of the field 'body.pollMsg.txPowerGMote'
     */
    public void set_body_pollMsg_txPowerGMote(short value) {
        setUIntBEElement(offsetBits_body_pollMsg_txPowerGMote(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.pollMsg.txPowerGMote'
     */
    public static int size_body_pollMsg_txPowerGMote() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.pollMsg.txPowerGMote'
     */
    public static int sizeBits_body_pollMsg_txPowerGMote() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.pushMsg.seqNumberPush
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.pushMsg.seqNumberPush' is signed (false).
     */
    public static boolean isSigned_body_pushMsg_seqNumberPush() {
        return false;
    }

    /**
     * Return whether the field 'body.pushMsg.seqNumberPush' is an array (false).
     */
    public static boolean isArray_body_pushMsg_seqNumberPush() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.pushMsg.seqNumberPush'
     */
    public static int offset_body_pushMsg_seqNumberPush() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.pushMsg.seqNumberPush'
     */
    public static int offsetBits_body_pushMsg_seqNumberPush() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'body.pushMsg.seqNumberPush'
     */
    public short get_body_pushMsg_seqNumberPush() {
        return (short)getUIntBEElement(offsetBits_body_pushMsg_seqNumberPush(), 8);
    }

    /**
     * Set the value of the field 'body.pushMsg.seqNumberPush'
     */
    public void set_body_pushMsg_seqNumberPush(short value) {
        setUIntBEElement(offsetBits_body_pushMsg_seqNumberPush(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.pushMsg.seqNumberPush'
     */
    public static int size_body_pushMsg_seqNumberPush() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.pushMsg.seqNumberPush'
     */
    public static int sizeBits_body_pushMsg_seqNumberPush() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.respMsg.seqNumberResp
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.respMsg.seqNumberResp' is signed (false).
     */
    public static boolean isSigned_body_respMsg_seqNumberResp() {
        return false;
    }

    /**
     * Return whether the field 'body.respMsg.seqNumberResp' is an array (false).
     */
    public static boolean isArray_body_respMsg_seqNumberResp() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.respMsg.seqNumberResp'
     */
    public static int offset_body_respMsg_seqNumberResp() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.respMsg.seqNumberResp'
     */
    public static int offsetBits_body_respMsg_seqNumberResp() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'body.respMsg.seqNumberResp'
     */
    public short get_body_respMsg_seqNumberResp() {
        return (short)getUIntBEElement(offsetBits_body_respMsg_seqNumberResp(), 8);
    }

    /**
     * Set the value of the field 'body.respMsg.seqNumberResp'
     */
    public void set_body_respMsg_seqNumberResp(short value) {
        setUIntBEElement(offsetBits_body_respMsg_seqNumberResp(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.respMsg.seqNumberResp'
     */
    public static int size_body_respMsg_seqNumberResp() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.respMsg.seqNumberResp'
     */
    public static int sizeBits_body_respMsg_seqNumberResp() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.respMsg.pushMsgLQ.RSSI
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.respMsg.pushMsgLQ.RSSI' is signed (false).
     */
    public static boolean isSigned_body_respMsg_pushMsgLQ_RSSI() {
        return false;
    }

    /**
     * Return whether the field 'body.respMsg.pushMsgLQ.RSSI' is an array (false).
     */
    public static boolean isArray_body_respMsg_pushMsgLQ_RSSI() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.respMsg.pushMsgLQ.RSSI'
     */
    public static int offset_body_respMsg_pushMsgLQ_RSSI() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.respMsg.pushMsgLQ.RSSI'
     */
    public static int offsetBits_body_respMsg_pushMsgLQ_RSSI() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'body.respMsg.pushMsgLQ.RSSI'
     */
    public short get_body_respMsg_pushMsgLQ_RSSI() {
        return (short)getSIntBEElement(offsetBits_body_respMsg_pushMsgLQ_RSSI(), 16);
    }

    /**
     * Set the value of the field 'body.respMsg.pushMsgLQ.RSSI'
     */
    public void set_body_respMsg_pushMsgLQ_RSSI(short value) {
        setSIntBEElement(offsetBits_body_respMsg_pushMsgLQ_RSSI(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.respMsg.pushMsgLQ.RSSI'
     */
    public static int size_body_respMsg_pushMsgLQ_RSSI() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.respMsg.pushMsgLQ.RSSI'
     */
    public static int sizeBits_body_respMsg_pushMsgLQ_RSSI() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.respMsg.pushMsgLQ.LQI
    //   Field type: int
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.respMsg.pushMsgLQ.LQI' is signed (false).
     */
    public static boolean isSigned_body_respMsg_pushMsgLQ_LQI() {
        return false;
    }

    /**
     * Return whether the field 'body.respMsg.pushMsgLQ.LQI' is an array (false).
     */
    public static boolean isArray_body_respMsg_pushMsgLQ_LQI() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.respMsg.pushMsgLQ.LQI'
     */
    public static int offset_body_respMsg_pushMsgLQ_LQI() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.respMsg.pushMsgLQ.LQI'
     */
    public static int offsetBits_body_respMsg_pushMsgLQ_LQI() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'body.respMsg.pushMsgLQ.LQI'
     */
    public int get_body_respMsg_pushMsgLQ_LQI() {
        return (int)getUIntBEElement(offsetBits_body_respMsg_pushMsgLQ_LQI(), 16);
    }

    /**
     * Set the value of the field 'body.respMsg.pushMsgLQ.LQI'
     */
    public void set_body_respMsg_pushMsgLQ_LQI(int value) {
        setUIntBEElement(offsetBits_body_respMsg_pushMsgLQ_LQI(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.respMsg.pushMsgLQ.LQI'
     */
    public static int size_body_respMsg_pushMsgLQ_LQI() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.respMsg.pushMsgLQ.LQI'
     */
    public static int sizeBits_body_respMsg_pushMsgLQ_LQI() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.respMsg.pushMsgLQ.CRC
    //   Field type: int
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.respMsg.pushMsgLQ.CRC' is signed (false).
     */
    public static boolean isSigned_body_respMsg_pushMsgLQ_CRC() {
        return false;
    }

    /**
     * Return whether the field 'body.respMsg.pushMsgLQ.CRC' is an array (false).
     */
    public static boolean isArray_body_respMsg_pushMsgLQ_CRC() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.respMsg.pushMsgLQ.CRC'
     */
    public static int offset_body_respMsg_pushMsgLQ_CRC() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.respMsg.pushMsgLQ.CRC'
     */
    public static int offsetBits_body_respMsg_pushMsgLQ_CRC() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'body.respMsg.pushMsgLQ.CRC'
     */
    public int get_body_respMsg_pushMsgLQ_CRC() {
        return (int)getUIntBEElement(offsetBits_body_respMsg_pushMsgLQ_CRC(), 16);
    }

    /**
     * Set the value of the field 'body.respMsg.pushMsgLQ.CRC'
     */
    public void set_body_respMsg_pushMsgLQ_CRC(int value) {
        setUIntBEElement(offsetBits_body_respMsg_pushMsgLQ_CRC(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.respMsg.pushMsgLQ.CRC'
     */
    public static int size_body_respMsg_pushMsgLQ_CRC() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.respMsg.pushMsgLQ.CRC'
     */
    public static int sizeBits_body_respMsg_pushMsgLQ_CRC() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.respMsg.pushMsgLQ.noiseFlr
    //   Field type: int
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.respMsg.pushMsgLQ.noiseFlr' is signed (false).
     */
    public static boolean isSigned_body_respMsg_pushMsgLQ_noiseFlr() {
        return false;
    }

    /**
     * Return whether the field 'body.respMsg.pushMsgLQ.noiseFlr' is an array (false).
     */
    public static boolean isArray_body_respMsg_pushMsgLQ_noiseFlr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.respMsg.pushMsgLQ.noiseFlr'
     */
    public static int offset_body_respMsg_pushMsgLQ_noiseFlr() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.respMsg.pushMsgLQ.noiseFlr'
     */
    public static int offsetBits_body_respMsg_pushMsgLQ_noiseFlr() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'body.respMsg.pushMsgLQ.noiseFlr'
     */
    public int get_body_respMsg_pushMsgLQ_noiseFlr() {
        return (int)getUIntBEElement(offsetBits_body_respMsg_pushMsgLQ_noiseFlr(), 16);
    }

    /**
     * Set the value of the field 'body.respMsg.pushMsgLQ.noiseFlr'
     */
    public void set_body_respMsg_pushMsgLQ_noiseFlr(int value) {
        setUIntBEElement(offsetBits_body_respMsg_pushMsgLQ_noiseFlr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.respMsg.pushMsgLQ.noiseFlr'
     */
    public static int size_body_respMsg_pushMsgLQ_noiseFlr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.respMsg.pushMsgLQ.noiseFlr'
     */
    public static int sizeBits_body_respMsg_pushMsgLQ_noiseFlr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.respMsg.respMsgLQ.RSSI
    //   Field type: short
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.respMsg.respMsgLQ.RSSI' is signed (false).
     */
    public static boolean isSigned_body_respMsg_respMsgLQ_RSSI() {
        return false;
    }

    /**
     * Return whether the field 'body.respMsg.respMsgLQ.RSSI' is an array (false).
     */
    public static boolean isArray_body_respMsg_respMsgLQ_RSSI() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.respMsg.respMsgLQ.RSSI'
     */
    public static int offset_body_respMsg_respMsgLQ_RSSI() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.respMsg.respMsgLQ.RSSI'
     */
    public static int offsetBits_body_respMsg_respMsgLQ_RSSI() {
        return 112;
    }

    /**
     * Return the value (as a short) of the field 'body.respMsg.respMsgLQ.RSSI'
     */
    public short get_body_respMsg_respMsgLQ_RSSI() {
        return (short)getSIntBEElement(offsetBits_body_respMsg_respMsgLQ_RSSI(), 16);
    }

    /**
     * Set the value of the field 'body.respMsg.respMsgLQ.RSSI'
     */
    public void set_body_respMsg_respMsgLQ_RSSI(short value) {
        setSIntBEElement(offsetBits_body_respMsg_respMsgLQ_RSSI(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.respMsg.respMsgLQ.RSSI'
     */
    public static int size_body_respMsg_respMsgLQ_RSSI() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.respMsg.respMsgLQ.RSSI'
     */
    public static int sizeBits_body_respMsg_respMsgLQ_RSSI() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.respMsg.respMsgLQ.LQI
    //   Field type: int
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.respMsg.respMsgLQ.LQI' is signed (false).
     */
    public static boolean isSigned_body_respMsg_respMsgLQ_LQI() {
        return false;
    }

    /**
     * Return whether the field 'body.respMsg.respMsgLQ.LQI' is an array (false).
     */
    public static boolean isArray_body_respMsg_respMsgLQ_LQI() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.respMsg.respMsgLQ.LQI'
     */
    public static int offset_body_respMsg_respMsgLQ_LQI() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.respMsg.respMsgLQ.LQI'
     */
    public static int offsetBits_body_respMsg_respMsgLQ_LQI() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'body.respMsg.respMsgLQ.LQI'
     */
    public int get_body_respMsg_respMsgLQ_LQI() {
        return (int)getUIntBEElement(offsetBits_body_respMsg_respMsgLQ_LQI(), 16);
    }

    /**
     * Set the value of the field 'body.respMsg.respMsgLQ.LQI'
     */
    public void set_body_respMsg_respMsgLQ_LQI(int value) {
        setUIntBEElement(offsetBits_body_respMsg_respMsgLQ_LQI(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.respMsg.respMsgLQ.LQI'
     */
    public static int size_body_respMsg_respMsgLQ_LQI() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.respMsg.respMsgLQ.LQI'
     */
    public static int sizeBits_body_respMsg_respMsgLQ_LQI() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.respMsg.respMsgLQ.CRC
    //   Field type: int
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.respMsg.respMsgLQ.CRC' is signed (false).
     */
    public static boolean isSigned_body_respMsg_respMsgLQ_CRC() {
        return false;
    }

    /**
     * Return whether the field 'body.respMsg.respMsgLQ.CRC' is an array (false).
     */
    public static boolean isArray_body_respMsg_respMsgLQ_CRC() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.respMsg.respMsgLQ.CRC'
     */
    public static int offset_body_respMsg_respMsgLQ_CRC() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.respMsg.respMsgLQ.CRC'
     */
    public static int offsetBits_body_respMsg_respMsgLQ_CRC() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'body.respMsg.respMsgLQ.CRC'
     */
    public int get_body_respMsg_respMsgLQ_CRC() {
        return (int)getUIntBEElement(offsetBits_body_respMsg_respMsgLQ_CRC(), 16);
    }

    /**
     * Set the value of the field 'body.respMsg.respMsgLQ.CRC'
     */
    public void set_body_respMsg_respMsgLQ_CRC(int value) {
        setUIntBEElement(offsetBits_body_respMsg_respMsgLQ_CRC(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.respMsg.respMsgLQ.CRC'
     */
    public static int size_body_respMsg_respMsgLQ_CRC() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.respMsg.respMsgLQ.CRC'
     */
    public static int sizeBits_body_respMsg_respMsgLQ_CRC() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.respMsg.respMsgLQ.noiseFlr
    //   Field type: int
    //   Offset (bits): 160
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.respMsg.respMsgLQ.noiseFlr' is signed (false).
     */
    public static boolean isSigned_body_respMsg_respMsgLQ_noiseFlr() {
        return false;
    }

    /**
     * Return whether the field 'body.respMsg.respMsgLQ.noiseFlr' is an array (false).
     */
    public static boolean isArray_body_respMsg_respMsgLQ_noiseFlr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.respMsg.respMsgLQ.noiseFlr'
     */
    public static int offset_body_respMsg_respMsgLQ_noiseFlr() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.respMsg.respMsgLQ.noiseFlr'
     */
    public static int offsetBits_body_respMsg_respMsgLQ_noiseFlr() {
        return 160;
    }

    /**
     * Return the value (as a int) of the field 'body.respMsg.respMsgLQ.noiseFlr'
     */
    public int get_body_respMsg_respMsgLQ_noiseFlr() {
        return (int)getUIntBEElement(offsetBits_body_respMsg_respMsgLQ_noiseFlr(), 16);
    }

    /**
     * Set the value of the field 'body.respMsg.respMsgLQ.noiseFlr'
     */
    public void set_body_respMsg_respMsgLQ_noiseFlr(int value) {
        setUIntBEElement(offsetBits_body_respMsg_respMsgLQ_noiseFlr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.respMsg.respMsgLQ.noiseFlr'
     */
    public static int size_body_respMsg_respMsgLQ_noiseFlr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.respMsg.respMsgLQ.noiseFlr'
     */
    public static int sizeBits_body_respMsg_respMsgLQ_noiseFlr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.respMsg.temperature
    //   Field type: int
    //   Offset (bits): 176
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.respMsg.temperature' is signed (false).
     */
    public static boolean isSigned_body_respMsg_temperature() {
        return false;
    }

    /**
     * Return whether the field 'body.respMsg.temperature' is an array (false).
     */
    public static boolean isArray_body_respMsg_temperature() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.respMsg.temperature'
     */
    public static int offset_body_respMsg_temperature() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.respMsg.temperature'
     */
    public static int offsetBits_body_respMsg_temperature() {
        return 176;
    }

    /**
     * Return the value (as a int) of the field 'body.respMsg.temperature'
     */
    public int get_body_respMsg_temperature() {
        return (int)getUIntBEElement(offsetBits_body_respMsg_temperature(), 16);
    }

    /**
     * Set the value of the field 'body.respMsg.temperature'
     */
    public void set_body_respMsg_temperature(int value) {
        setUIntBEElement(offsetBits_body_respMsg_temperature(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.respMsg.temperature'
     */
    public static int size_body_respMsg_temperature() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.respMsg.temperature'
     */
    public static int sizeBits_body_respMsg_temperature() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: body.respMsg.humidity
    //   Field type: int
    //   Offset (bits): 192
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'body.respMsg.humidity' is signed (false).
     */
    public static boolean isSigned_body_respMsg_humidity() {
        return false;
    }

    /**
     * Return whether the field 'body.respMsg.humidity' is an array (false).
     */
    public static boolean isArray_body_respMsg_humidity() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'body.respMsg.humidity'
     */
    public static int offset_body_respMsg_humidity() {
        return (192 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'body.respMsg.humidity'
     */
    public static int offsetBits_body_respMsg_humidity() {
        return 192;
    }

    /**
     * Return the value (as a int) of the field 'body.respMsg.humidity'
     */
    public int get_body_respMsg_humidity() {
        return (int)getUIntBEElement(offsetBits_body_respMsg_humidity(), 16);
    }

    /**
     * Set the value of the field 'body.respMsg.humidity'
     */
    public void set_body_respMsg_humidity(int value) {
        setUIntBEElement(offsetBits_body_respMsg_humidity(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'body.respMsg.humidity'
     */
    public static int size_body_respMsg_humidity() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'body.respMsg.humidity'
     */
    public static int sizeBits_body_respMsg_humidity() {
        return 16;
    }

}
