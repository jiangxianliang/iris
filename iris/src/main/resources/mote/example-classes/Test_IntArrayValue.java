package mote.sending;
/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'Test_IntArrayValue'
 * message type.
 */

public class Test_IntArrayValue extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 0;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 124;

    /** Create a new Test_IntArrayValue of size 0. */
    public Test_IntArrayValue() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new Test_IntArrayValue of the given data_length. */
    public Test_IntArrayValue(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Test_IntArrayValue with the given data_length
     * and base offset.
     */
    public Test_IntArrayValue(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Test_IntArrayValue using the given byte array
     * as backing store.
     */
    public Test_IntArrayValue(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Test_IntArrayValue using the given byte array
     * as backing store, with the given base offset.
     */
    public Test_IntArrayValue(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Test_IntArrayValue using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public Test_IntArrayValue(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Test_IntArrayValue embedded in the given message
     * at the given base offset.
     */
    public Test_IntArrayValue(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Test_IntArrayValue embedded in the given message
     * at the given base offset and length.
     */
    public Test_IntArrayValue(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <Test_IntArrayValue> \n";
      try {
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: value16
    //   Field type: int[], signed
    //   Offset (bits): 0
    //   Size of each element (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'value16' is signed (true).
     */
    public static boolean isSigned_value16() {
        return true;
    }

    /**
     * Return whether the field 'value16' is an array (true).
     */
    public static boolean isArray_value16() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'value16'
     */
    public static int offset_value16(int index1) {
        int offset = 0;
        if (index1 < 0) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'value16'
     */
    public static int offsetBits_value16(int index1) {
        int offset = 0;
        if (index1 < 0) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        return offset;
    }

    /**
     * Return the entire array 'value16' as a int[]
     */
    public int[] get_value16() {
        throw new IllegalArgumentException("Cannot get field as array - unknown size");
    }

    /**
     * Set the contents of the array 'value16' from the given int[]
     */
    public void set_value16(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_value16(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'value16'
     */
    public int getElement_value16(int index1) {
        return (int)getSIntBEElement(offsetBits_value16(index1), 32);
    }

    /**
     * Set an element of the array 'value16'
     */
    public void setElement_value16(int index1, int value) {
        setSIntBEElement(offsetBits_value16(index1), 32, value);
    }

    /**
     * Return the size, in bytes, of each element of the array 'value16'
     */
    public static int elementSize_value16() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'value16'
     */
    public static int elementSizeBits_value16() {
        return 32;
    }

    /**
     * Return the number of dimensions in the array 'value16'
     */
    public static int numDimensions_value16() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'value16'
     * for the given dimension.
     */
    public static int numElements_value16(int dimension) {
      int array_dims[] = { 0,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
