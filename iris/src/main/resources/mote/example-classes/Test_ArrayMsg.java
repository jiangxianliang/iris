package mote.sending;
/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'Test_ArrayMsg'
 * message type.
 */

public class Test_ArrayMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 150;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 122;

    /** Create a new Test_ArrayMsg of size 150. */
    public Test_ArrayMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new Test_ArrayMsg of the given data_length. */
    public Test_ArrayMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Test_ArrayMsg with the given data_length
     * and base offset.
     */
    public Test_ArrayMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Test_ArrayMsg using the given byte array
     * as backing store.
     */
    public Test_ArrayMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Test_ArrayMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public Test_ArrayMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Test_ArrayMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public Test_ArrayMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Test_ArrayMsg embedded in the given message
     * at the given base offset.
     */
    public Test_ArrayMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Test_ArrayMsg embedded in the given message
     * at the given base offset and length.
     */
    public Test_ArrayMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <Test_ArrayMsg> \n";
      try {
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: testStruct.value16
    //   Field type: short[][]
    //   Offset (bits): 0
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'testStruct.value16' is signed (false).
     */
    public static boolean isSigned_testStruct_value16() {
        return false;
    }

    /**
     * Return whether the field 'testStruct.value16' is an array (true).
     */
    public static boolean isArray_testStruct_value16() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'testStruct.value16'
     */
    public static int offset_testStruct_value16(int index1, int index2) {
        int offset = 0;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 240;
        if (index2 < 0 || index2 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index2 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'testStruct.value16'
     */
    public static int offsetBits_testStruct_value16(int index1, int index2) {
        int offset = 0;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 240;
        if (index2 < 0 || index2 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index2 * 16;
        return offset;
    }

    /**
     * Return the entire array 'testStruct.value16' as a short[][]
     */
    public short[][] get_testStruct_value16() {
        short[][] tmp = new short[5][5];
        for (int index0 = 0; index0 < numElements_testStruct_value16(0); index0++) {
          for (int index1 = 0; index1 < numElements_testStruct_value16(1); index1++) {
              tmp[index0][index1] = getElement_testStruct_value16(index0,index1);
          }
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'testStruct.value16' from the given short[][]
     */
    public void set_testStruct_value16(short[][] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
          for (int index1 = 0; index1 < value[index0].length; index1++) {
              setElement_testStruct_value16(index0,index1, value[index0][index1]);
          }
        }
    }

    /**
     * Return an element (as a short) of the array 'testStruct.value16'
     */
    public short getElement_testStruct_value16(int index1, int index2) {
        return (short)getSIntBEElement(offsetBits_testStruct_value16(index1, index2), 16);
    }

    /**
     * Set an element of the array 'testStruct.value16'
     */
    public void setElement_testStruct_value16(int index1, int index2, short value) {
        setSIntBEElement(offsetBits_testStruct_value16(index1, index2), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'testStruct.value16'
     */
    public static int totalSize_testStruct_value16() {
        return (1200 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'testStruct.value16'
     */
    public static int totalSizeBits_testStruct_value16() {
        return 1200;
    }

    /**
     * Return the size, in bytes, of each element of the array 'testStruct.value16'
     */
    public static int elementSize_testStruct_value16() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'testStruct.value16'
     */
    public static int elementSizeBits_testStruct_value16() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'testStruct.value16'
     */
    public static int numDimensions_testStruct_value16() {
        return 2;
    }

    /**
     * Return the number of elements in the array 'testStruct.value16'
     * for the given dimension.
     */
    public static int numElements_testStruct_value16(int dimension) {
      int array_dims[] = { 5, 5,  };
        if (dimension < 0 || dimension >= 2) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: testStruct.value32
    //   Field type: int[][]
    //   Offset (bits): 80
    //   Size of each element (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'testStruct.value32' is signed (false).
     */
    public static boolean isSigned_testStruct_value32() {
        return false;
    }

    /**
     * Return whether the field 'testStruct.value32' is an array (true).
     */
    public static boolean isArray_testStruct_value32() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'testStruct.value32'
     */
    public static int offset_testStruct_value32(int index1, int index2) {
        int offset = 80;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 240;
        if (index2 < 0 || index2 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index2 * 32;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'testStruct.value32'
     */
    public static int offsetBits_testStruct_value32(int index1, int index2) {
        int offset = 80;
        if (index1 < 0 || index1 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 240;
        if (index2 < 0 || index2 >= 5) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index2 * 32;
        return offset;
    }

    /**
     * Return the entire array 'testStruct.value32' as a int[][]
     */
    public int[][] get_testStruct_value32() {
        int[][] tmp = new int[5][5];
        for (int index0 = 0; index0 < numElements_testStruct_value32(0); index0++) {
          for (int index1 = 0; index1 < numElements_testStruct_value32(1); index1++) {
              tmp[index0][index1] = getElement_testStruct_value32(index0,index1);
          }
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'testStruct.value32' from the given int[][]
     */
    public void set_testStruct_value32(int[][] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
          for (int index1 = 0; index1 < value[index0].length; index1++) {
              setElement_testStruct_value32(index0,index1, value[index0][index1]);
          }
        }
    }

    /**
     * Return an element (as a int) of the array 'testStruct.value32'
     */
    public int getElement_testStruct_value32(int index1, int index2) {
        return (int)getSIntBEElement(offsetBits_testStruct_value32(index1, index2), 32);
    }

    /**
     * Set an element of the array 'testStruct.value32'
     */
    public void setElement_testStruct_value32(int index1, int index2, int value) {
        setSIntBEElement(offsetBits_testStruct_value32(index1, index2), 32, value);
    }

    /**
     * Return the total size, in bytes, of the array 'testStruct.value32'
     */
    public static int totalSize_testStruct_value32() {
        return (1200 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'testStruct.value32'
     */
    public static int totalSizeBits_testStruct_value32() {
        return 1200;
    }

    /**
     * Return the size, in bytes, of each element of the array 'testStruct.value32'
     */
    public static int elementSize_testStruct_value32() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'testStruct.value32'
     */
    public static int elementSizeBits_testStruct_value32() {
        return 32;
    }

    /**
     * Return the number of dimensions in the array 'testStruct.value32'
     */
    public static int numDimensions_testStruct_value32() {
        return 2;
    }

    /**
     * Return the number of elements in the array 'testStruct.value32'
     * for the given dimension.
     */
    public static int numElements_testStruct_value32(int dimension) {
      int array_dims[] = { 5, 5,  };
        if (dimension < 0 || dimension >= 2) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
